#!/usr/bin/Rscript
library(DESeq2)
library(edgeR)
library(pheatmap)
library(RColorBrewer)
library(ggbeeswarm)
library(genefilter)
library(biomaRt)
library(stringr)
library(ggplot2)
library(NMF)
library(tidyverse)
matrix <- "/home/boris/Bureau/DE/DE-nf/output/finale.txt"
remplace <- function(name){name <- gsub("-", ".", name)}
split <- function(name){name <- str_split(name,"_")[[1]][1]}
metadata <- "/home/boris/Bureau/DE/DE-nf/data/Metadata.xls"
#load
countData <- read.table(matrix, row.names = 1, header = T, sep = "\t")
countData <- head(countData,-5)
#cutoff
cutoff <- as.integer(cpm(10, mean(colSums(countData))))
keep <- rowSums(cpm(countData)>cutoff) >= 2
#load
countData <- read.table(matrix, row.names = 1, header = T, sep = "\t")
countData <- head(countData,-5)
countData <- countData[1:61]
#cutoff
cutoff <- as.integer(cpm(10, mean(colSums(countData))))
keep <- rowSums(cpm(countData)>cutoff) >= 2
countData <- countData[keep,]
#rename
colnames(countData) <- apply(as.matrix(colnames(countData)), 1, split)
countData <- countData[,order(colnames(countData))]
#process metadata
colData <- readxl::read_xls(path = metadata)
colData[1] <- apply(colData[1], 1, remplace)
colData <- colData[order(colData[,1]),]
#intersect with data already processed
colData <- colData[which(colData$`Name of sample` %in% intersect(colData$`Name of sample`, colnames(countData))),]
countData <- countData[,which(colnames(countData) %in% intersect(colData$`Name of sample`, colnames(countData)))]
#DESeq2 analysis
dataset <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~Modality)
dataset <- estimateSizeFactors(dataset) #+ dataset@colData$sizeFactor
dataset <- DESeq(dataset)
return(dataset)
dataset <- DEA_analysis(matrix, metadata)
rld <- rlog(dataset, blind = T)
# Top Genes Results
DEA_result <- function(dataset){
result <- results(dataset, pAdjustMethod = "BH")
result <- result[complete.cases(result),]
result <- result[order(result$padj),]
#Tri des gènes les plus différentiellement exprimé
topResults <- as.matrix(subset(result , padj < 0.05))
return(topResults)
}
result <- DEA_result(dataset)
topGenes <- assay(rld)[rownames(result),]
result
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("Result.pdf", height = 12, width = 12)
print(result)
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("/mnt/DE/result/R/Result.pdf", height = 12, width = 12)
# Résultat
grid.text("Résultats des top gènes les plus différentiellement exprimés :", x = 0.05, hjust = 0.05, vjust = -5, gp = gpar(fontsize = 25))
print(result)
dev.off()
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("/mnt/DE/result/R/Result.pdf", height = 12, width = 12)
print(result)
dev.off()
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("/mnt/DE/result/R/Result.pdf", height = 12, width = 12)
text(x=.1, y=.1, result)
plot.new()
text(x=.1, y=.1, result)
dev.off()
?text
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("/mnt/DE/result/R/Result.pdf", height = 12, width = 12)
plot.new()
text(x=.1, y=.1, result, cex = 10)
dev.off()
result
type(result)
View(result)
View(result[1])
View(result[1,])
View(result[,1])
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("/mnt/DE/result/R/Result.pdf", height = 12, width = 12)
text(x=.1, y=.1, result[,1], cex = 10)
dev.off()
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("/mnt/DE/result/R/Result.pdf", height = 12, width = 12)
plot.new()
text(x=.1, y=.1, result[,1], cex = 10)
dev.off()
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("/mnt/DE/result/R/Result.pdf", height = 12, width = 12)
text(x=.1, y=.1, result[,1], cex = 1)
dev.off()
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("/mnt/DE/result/R/Result.pdf", height = 12, width = 12)
# Résultat
#grid.text("Résultats des top gènes les plus différentiellement exprimés :", x = 0.05, hjust = 0.05, vjust = -5, gp = gpar(fontsize = 25))
#print(result)
plot.new()
text(x=.1, y=.1, result[,1], cex = 1)
dev.off()
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("/mnt/DE/result/R/Result.pdf", height = 12, width = 12)
# Résultat
#grid.text("Résultats des top gènes les plus différentiellement exprimés :", x = 0.05, hjust = 0.05, vjust = -5, gp = gpar(fontsize = 25))
#print(result)
plot.new()
text(x=.1, y=.1, t(result[,1]), cex = 1)
dev.off()
print.matrix(result, rowlab=character(0), collab=character(0),
quote=TRUE, right=FALSE)
write(result)
###############################################################################################################################################
## -- Figure time -- ##
#######################
pdf("/mnt/DE/result/R/Result.pdf", height = 12, width = 12)
write(result)
dev.off()
?install.packages
install.packages('gridExtra',dependencies=TRUE)
result
# Dendrogramme
rlog.norm.counts <- assay(rld)
distance.m_rlog  <- as.dist(1 - cor(rlog.norm.counts , method = "pearson" ))
plot(hclust(distance.m_rlog), labels = colnames(rlog.norm.counts),main = "rlog  transformed  read  counts\ndistance: Pearson  correlation")
dev.off()
# Dendrogramme
rlog.norm.counts <- assay(rld)
distance.m_rlog  <- as.dist(1 - cor(rlog.norm.counts , method = "pearson" ))
plot(hclust(distance.m_rlog), labels = colnames(rlog.norm.counts),main = "rlog  transformed  read  counts\ndistance: Pearson  correlation")
# PCA
plotPCA(rld, intgroup = "Modality") + theme_bw() + ggtitle("Rlog transformed counts")
plotPCA(rld, intgroup = "Sex")+ theme_bw() + ggtitle("Rlog transformed counts")
# Plot count
topGene <- rownames(result)[which.min(result[,"padj"])]
els <- plotCounts(dataset, gene = topGene, intgroup="Modality", returnData=TRUE)
els$sex = dataset@colData$Sex
ggplot(els,aes(x = Modality, y = count)) + ggtitle(topGene) + geom_point(aes(color = sex))
els
els$Modality
install.packages("gridExtra_2.3.tar.gz", repos = NULL, type="source")
library(gridExtra)
